[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quantitative Methoden",
    "section": "",
    "text": "Quantitative Methoden\nDiese Website dient als Sammlung meiner Vorlesungsnotizen und Übungen für die Vorlesung “Quantitative Methoden” im Herbstsemester 2024.\nDiese Sammlung ist aktuell noch am entstehen.",
    "crumbs": [
      "Quantitative Methoden"
    ]
  },
  {
    "objectID": "computer_basics_and_entry_to_R.html",
    "href": "computer_basics_and_entry_to_R.html",
    "title": "1  Computer Basics and R",
    "section": "",
    "text": "1.1 Vektoren und Matrizen",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Computer Basics and R</span>"
    ]
  },
  {
    "objectID": "computer_basics_and_entry_to_R.html#vektoren-und-matrizen",
    "href": "computer_basics_and_entry_to_R.html#vektoren-und-matrizen",
    "title": "1  Computer Basics and R",
    "section": "",
    "text": "1.1.1 Vektoren\nVektoren sind eine der grundlegenden Datenstrukturen in R. Sie können mit der c() Funktion erstellt werden. Vektoren sind grundsätzlich ähnlich wie Objekte vom typ list in Python.\n\n# Vektor erstellen\nvectorA &lt;- c(1, 2, 3, 4, 5)\n\n# Vektor ausgeben\nvectorA\n\n[1] 1 2 3 4 5\n\n\n\n1.1.1.1 Vektorlänge- und Indizes\n\n# Vektorlänge\nlength(vectorA)\n\n[1] 5\n\n# Vektorindexierung\nvectorA[1]\n\n[1] 1\n\n# Vektor slicing\nvectorA[2:4]\n\n[1] 2 3 4\n\n\n\n\n1.1.1.2 Werte an Indizes ändern\n\n# ACHTUNG: R-Indizierung beginnt bei 1\nvectorA[1] &lt;- 10  # Wert an Index 1 ändern\n\nvectorA\n\n[1] 10  2  3  4  5\n\n\n\n\n1.1.1.3 Vektoren addieren\n\nvectorB &lt;- c(6, 7, 8, 9, 10)\n\n# Vektoren werden elementweise addiert\nvectorA + vectorB\n\n[1] 16  9 11 13 15\n\n\n\n\n1.1.1.4 Vektoren konkatenieren\n\nvectorC &lt;- c(vectorA, vectorB)\n\nvectorC\n\n [1] 10  2  3  4  5  6  7  8  9 10\n\n\n\n\n1.1.1.5 Datentypen\n\n# Vektoren können auch andere Datentypen als Integers enthalten.\nvectorD &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\")\n\nvectorD\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\"\n\n# Vektoren können auch logische Werte enthalten\nvectorE &lt;- c(TRUE, FALSE, TRUE, TRUE, FALSE)\n\nvectorE\n\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n\n\n\n\n1.1.1.6 Vergleichsoperationen\n\n# Vergleichsoperationen können auf Vektoren angewendet werden\n# Hier wird für jedes Element in vectorA geprüft, ob es größer oder gleich dem Wert 3 ist\n3 &gt;= vectorA\n\n[1] FALSE  TRUE  TRUE FALSE FALSE\n\n\n\n\n\n1.1.2 Matrizen\nMatrizen sind zweidimensionale Datenstrukturen in R. Sie können mit der matrix() Funktion erstellt werden.\n\n# Matrix erstellen\nmatrixA &lt;- matrix(1:12, nrow = 3, ncol = 4)\n\n# Matrix ausgeben\nmatrixA\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n# Bestimmte Elemente aus der Matrix auswählen\n\n# Erstes Element\nmatrixA[1, 1]\n\n[1] 1\n\n# Erste Zeile\nmatrixA[1, ]\n\n[1]  1  4  7 10\n\n# Erste Spalte\nmatrixA[, 1]\n\n[1] 1 2 3\n\n\n\nsaison &lt;- read.csv('Data/meteodaten_saison.csv', sep = ',', header = TRUE)\nstr(saison)\n\n'data.frame':   492 obs. of  6 variables:\n $ Jahr                           : int  1901 1901 1901 1901 1902 1902 1902 1902 1903 1903 ...\n $ Saison                         : chr  \"Fruehling(MAM)\" \"Herbst(SON)\" \"Sommer(JJA)\" \"Winter(DJF)\" ...\n $ Bern_Mitteltemperatur          : num  7.73 7.4 16.8 -2.73 7.53 ...\n $ Bern_Niederschlagssumme        : num  92.6 81.6 127 37.5 107.7 ...\n $ GrStBernhard_Mitteltemperatur  : num  -4 -0.8 6.3 -10.6 -3.63 ...\n $ GrStBernhard_Niederschlagssumme: num  164.9 173.6 95.1 118.7 149.4 ...\n\nhead(saison)\n\n  Jahr         Saison Bern_Mitteltemperatur Bern_Niederschlagssumme\n1 1901 Fruehling(MAM)              7.733333                92.60000\n2 1901    Herbst(SON)              7.400000                81.63333\n3 1901    Sommer(JJA)             16.800000               127.03333\n4 1901    Winter(DJF)             -2.733333                37.46667\n5 1902 Fruehling(MAM)              7.533333               107.73333\n6 1902    Herbst(SON)              7.466667                77.23333\n  GrStBernhard_Mitteltemperatur GrStBernhard_Niederschlagssumme\n1                     -4.000000                       164.90000\n2                     -0.800000                       173.60000\n3                      6.300000                        95.06667\n4                    -10.600000                       118.73333\n5                     -3.633333                       149.36667\n6                     -1.000000                       111.86667\n\ntail(saison)\n\n    Jahr         Saison Bern_Mitteltemperatur Bern_Niederschlagssumme\n487 2022    Sommer(JJA)             20.000000                79.43333\n488 2022    Winter(DJF)              2.233333                61.56667\n489 2023 Fruehling(MAM)              9.533333                90.83333\n490 2023    Herbst(SON)             11.966667               123.73333\n491 2023    Sommer(JJA)             20.000000                67.70000\n492 2023    Winter(DJF)              2.700000                77.70000\n    GrStBernhard_Mitteltemperatur GrStBernhard_Niederschlagssumme\n487                     10.266667                        85.60000\n488                     -4.966667                        90.00000\n489                     -1.666667                       129.46667\n490                      2.966667                       184.43333\n491                      9.200000                        96.13333\n492                     -5.333333                        76.23333\n\nsummary(saison)\n\n      Jahr         Saison          Bern_Mitteltemperatur\n Min.   :1901   Length:492         Min.   :-4.500       \n 1st Qu.:1931   Class :character   1st Qu.: 4.883       \n Median :1962   Mode  :character   Median : 8.750       \n Mean   :1962                      Mean   : 8.715       \n 3rd Qu.:1993                      3rd Qu.:12.750       \n Max.   :2023                      Max.   :21.100       \n Bern_Niederschlagssumme GrStBernhard_Mitteltemperatur\n Min.   : 15.97          Min.   :-11.2000             \n 1st Qu.: 61.89          1st Qu.: -5.1000             \n Median : 81.07          Median : -1.4000             \n Mean   : 84.42          Mean   : -0.9232             \n 3rd Qu.:102.95          3rd Qu.:  3.2750             \n Max.   :200.03          Max.   : 10.5333             \n GrStBernhard_Niederschlagssumme\n Min.   : 41.97                 \n 1st Qu.:127.68                 \n Median :163.83                 \n Mean   :171.29                 \n 3rd Qu.:206.39                 \n Max.   :450.53                 \n\nsaison[1:10,]\n\n   Jahr         Saison Bern_Mitteltemperatur Bern_Niederschlagssumme\n1  1901 Fruehling(MAM)              7.733333                92.60000\n2  1901    Herbst(SON)              7.400000                81.63333\n3  1901    Sommer(JJA)             16.800000               127.03333\n4  1901    Winter(DJF)             -2.733333                37.46667\n5  1902 Fruehling(MAM)              7.533333               107.73333\n6  1902    Herbst(SON)              7.466667                77.23333\n7  1902    Sommer(JJA)             16.466667                98.63333\n8  1902    Winter(DJF)             -0.800000                64.63333\n9  1903 Fruehling(MAM)              7.433333                59.20000\n10 1903    Herbst(SON)              8.766667                89.10000\n   GrStBernhard_Mitteltemperatur GrStBernhard_Niederschlagssumme\n1                     -4.0000000                       164.90000\n2                     -0.8000000                       173.60000\n3                      6.3000000                        95.06667\n4                    -10.6000000                       118.73333\n5                     -3.6333333                       149.36667\n6                     -1.0000000                       111.86667\n7                      5.3000000                        80.90000\n8                     -7.4000000                       113.73333\n9                     -4.4666667                       136.56667\n10                    -0.4666667                       169.03333",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Computer Basics and R</span>"
    ]
  },
  {
    "objectID": "computer_basics_and_entry_to_R.html#rechnen-mit-r",
    "href": "computer_basics_and_entry_to_R.html#rechnen-mit-r",
    "title": "1  Computer Basics and R",
    "section": "1.2 Rechnen mit R",
    "text": "1.2 Rechnen mit R\n\n1.2.1 Arithmetische Operationen\n\n1.2.1.1 Grundlegende Arithmetik\n\n5 + 2\n\n[1] 7\n\n\n\n\n1.2.1.2 Klammern\n\n# Gleiche Funktion wie sonst\n(5 + 2) * 3\n\n[1] 21\n\n\n\n\n1.2.1.3 Exponenenten\n\n# Exponenten\n2^3\n\n[1] 8\n\n\n\n\n1.2.1.4 Logarithmen\n\n# Logarithmen\n# Standardmäßig wird der natürliche Logarithmus verwendet\nlog(100)\n\n[1] 4.60517\n\n# Logarithmus zur Basis 10\nlog10(100)\n\n[1] 2\n\n# Logarithmus zur Basis 2\n\nlog2(100)\n\n[1] 6.643856\n\n# Logarithmus zur Basis 3\n\nlog(100, base = 3)\n\n[1] 4.191807",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Computer Basics and R</span>"
    ]
  },
  {
    "objectID": "computer_basics_and_entry_to_R.html#übungen-1",
    "href": "computer_basics_and_entry_to_R.html#übungen-1",
    "title": "1  Computer Basics and R",
    "section": "1.3 Übungen 1",
    "text": "1.3 Übungen 1\n\n1.3.1 Vektoren:\nÜberlegt euch die erwarteten Lösungen vor dem Eintippen!\n\nx &lt;-c(5,2,1,4)\nxx &lt;-c(1,10,15,18)\ny &lt;-rep(1,5)\nz &lt;-c(TRUE,FALSE,TRUE,TRUE)\n\n# A\nsum (x)\n\n[1] 12\n\nrange(x)\n\n[1] 1 5\n\nlength(x)\n\n[1] 4\n\nsum(x)\n\n[1] 12\n\n# B\nc(x,y,13)\n\n [1]  5  2  1  4  1  1  1  1  1 13\n\n# C\nx[4] * y[2]\n\n[1] 4\n\nxx[2:4] + x[1:3]\n\n[1] 15 17 19\n\n# D\nxx &lt;= 12\n\n[1]  TRUE  TRUE FALSE FALSE\n\nxx [xx &lt;=12]\n\n[1]  1 10\n\n# E\nplot(x,xx)\n\n\n\n\n\n\n\nplot(x[z],xx[z])\n\n\n\n\n\n\n\n\n\n\n1.3.2 Zahlenfolgen: Erzeugt mit den rep und seq Funktionen folgende Zahlenfolgen:\n\n1 2 3 4 5 6 7 8 9\n'm'  'w'  'm'  'w'  'm'  'w'\n1 2 3 4 1 2 3 4 1 2 3 4\n1 2 2 3 3 3 4 4 4 4\n\n\n\nLösungen\n# a)\nseq(1, 9)\n\n\n[1] 1 2 3 4 5 6 7 8 9\n\n\nLösungen\n# b)\nrep(c('m', 'w'), times = 3)\n\n\n[1] \"m\" \"w\" \"m\" \"w\" \"m\" \"w\"\n\n\nLösungen\n# c)\nrep(1:4, times = 3)\n\n\n [1] 1 2 3 4 1 2 3 4 1 2 3 4\n\n\nLösungen\n# d)\nrep(1:4, 1:4)\n\n\n [1] 1 2 2 3 3 3 4 4 4 4\n\n\n\n\n1.3.3 Einlesen von Daten:\nLest die Datei ”meteodaten_saison.csv” in ein:\n\n# Relativer Pfad zur Datei\nsaison &lt;- read.csv('Data/meteodaten_saison.csv', sep = ',', header = TRUE)\n\n# Struktur der Daten anzeigen\nstr(saison)\n\n'data.frame':   492 obs. of  6 variables:\n $ Jahr                           : int  1901 1901 1901 1901 1902 1902 1902 1902 1903 1903 ...\n $ Saison                         : chr  \"Fruehling(MAM)\" \"Herbst(SON)\" \"Sommer(JJA)\" \"Winter(DJF)\" ...\n $ Bern_Mitteltemperatur          : num  7.73 7.4 16.8 -2.73 7.53 ...\n $ Bern_Niederschlagssumme        : num  92.6 81.6 127 37.5 107.7 ...\n $ GrStBernhard_Mitteltemperatur  : num  -4 -0.8 6.3 -10.6 -3.63 ...\n $ GrStBernhard_Niederschlagssumme: num  164.9 173.6 95.1 118.7 149.4 ...\n\n# Daten filtern\nsaison_winter &lt;- subset(saison, saison[,2] == \"Winter(DJF)\")\n\n\n\n1.3.4 apply()\n\n# Mittelwerte über die Spalten 3 bis 6 berechnen\napply(saison[3:6], 2, mean)\n\n          Bern_Mitteltemperatur         Bern_Niederschlagssumme \n                      8.7151762                      84.4199187 \n  GrStBernhard_Mitteltemperatur GrStBernhard_Niederschlagssumme \n                     -0.9231707                     171.2852304 \n\n\n\n\n1.3.5 aggregate()\n\naggregate(saison[,3:6], list(saison[,2]), mean)\n\n         Group.1 Bern_Mitteltemperatur Bern_Niederschlagssumme\n1 Fruehling(MAM)              8.540921                82.61220\n2    Herbst(SON)              8.886992                80.91192\n3    Sommer(JJA)             17.230894               112.77886\n4    Winter(DJF)              0.201897                61.37669\n  GrStBernhard_Mitteltemperatur GrStBernhard_Niederschlagssumme\n1                    -2.9474255                        186.1138\n2                     0.2598916                        176.5862\n3                     6.5636856                        136.6244\n4                    -7.5688347                        185.8165",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Computer Basics and R</span>"
    ]
  },
  {
    "objectID": "computer_basics_and_entry_to_R.html#grafiken-in-r",
    "href": "computer_basics_and_entry_to_R.html#grafiken-in-r",
    "title": "1  Computer Basics and R",
    "section": "1.4 Grafiken in R",
    "text": "1.4 Grafiken in R\n\n1.4.1 plot()\n\n# Plot erstellen mit Achsenbeschriftungen und Linien\nplot(saison_winter[,1], saison_winter[,3], type = \"l\", xlab = \"Jahr\", ylab = \"Durchschnittstemperatur\", main = \"Saisonale Durchschnittstemperaturen (Winter)\", ylim = c(-15, 5))\n\n# Weitere Linien für andere Spalten hinzufügen\nlines(saison_winter[,1], saison_winter[,5], col = \"blue\")\n\n# Legende hinzufügen\nlegend(\"bottomright\", legend = c(\"Bern\", \"Gr. St. Bernhard\"), col = c(\"black\", \"blue\"), lty = 1)\n\n# Gestrichelte Horizontale Linie bei 0 hinzufügen\nabline(h = 0, lty = 2)\n\n# Trendlinie für Bern hinzufügen\nmodel_bern &lt;- lm(saison_winter[,3] ~ saison_winter[,1]) # lineare Regression\nabline(model_bern, col = \"black\", lty = 2) # gestrichelte Linie für die Trendlinie\n\n# Trendlinie für Gr. St. Bernhard hinzufügen\nmodel_gr_bern &lt;- lm(saison_winter[,5] ~ saison_winter[,1]) # lineare Regression\nabline(model_gr_bern, col = \"blue\", lty = 2) # gestrichelte Linie für die Trendlinie\n\n\n\n\n\n\n\n\n\n\n1.4.2 R-Übungen 2\n\n# Relativer Pfad zur Datei\nsaison &lt;- read.csv('Data/meteodaten_saison.csv', sep = ',', header = TRUE)\n\n# Struktur der Daten anzeigen\nstr(saison)\n\n'data.frame':   492 obs. of  6 variables:\n $ Jahr                           : int  1901 1901 1901 1901 1902 1902 1902 1902 1903 1903 ...\n $ Saison                         : chr  \"Fruehling(MAM)\" \"Herbst(SON)\" \"Sommer(JJA)\" \"Winter(DJF)\" ...\n $ Bern_Mitteltemperatur          : num  7.73 7.4 16.8 -2.73 7.53 ...\n $ Bern_Niederschlagssumme        : num  92.6 81.6 127 37.5 107.7 ...\n $ GrStBernhard_Mitteltemperatur  : num  -4 -0.8 6.3 -10.6 -3.63 ...\n $ GrStBernhard_Niederschlagssumme: num  164.9 173.6 95.1 118.7 149.4 ...\n\n# Daten filtern\nsaison_fruehling &lt;- saison[saison[,2] == \"Fruehling(MAM)\",]\nsaison_sommer &lt;- saison[saison[,2] == \"Sommer(JJA)\",]\nsaison_herbst &lt;- saison[saison[,2] == \"Herbst(SON)\",]\nsaison_winter &lt;- subset(saison, saison[,2] == \"Winter(DJF)\")\n\n# Plot mit den Saisontemperaturen erstellen erstellen\nplot(saison_fruehling[,1], saison_fruehling[,3], type = \"l\", xlab = \"Jahr\", ylab = \"Durchschnittstemperatur in °C\", main = \"Saisonale Durchschnittstemperaturen in Bern\", xlim = c(1900, 2020), ylim = c(-5, 35))\n\nlines(saison_sommer[,1], saison_sommer[,3], col = \"red\")\nlines(saison_herbst[,1], saison_herbst[,3], col = \"green\")\nlines(saison_winter[,1], saison_winter[,3], col = \"blue\")\n\n# Gestrichelte Horizontale Linie bei 0 hinzufügen\nabline(h = 0, lty = 2)\n\n# Saisonale Mittelwertlinien hinzufügen\n# lty = 2 für gestrichelte Linie\nabline(h = mean(saison_fruehling[,3]), col = \"black\", lty = 2)\nabline(h = mean(saison_sommer[,3]), col = \"red\", lty = 2)\nabline(h = mean(saison_herbst[,3]), col = \"green\", lty = 2)\nabline(h = mean(saison_winter[,3]), col = \"blue\", lty = 2)\n\n# Legende ausserhalb des Plots hinzufügen\n# Legende außerhalb des Plots hinzufügen\nlegend(\"topright\", legend = c(\"Frühling\", \"Sommer\", \"Herbst\", \"Winter\"), col = c(\"black\", \"red\", \"green\", \"blue\"), lty = 1, xpd = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Computer Basics and R</span>"
    ]
  },
  {
    "objectID": "grundlagen_R.html",
    "href": "grundlagen_R.html",
    "title": "2  Grundlagen R",
    "section": "",
    "text": "2.1 Grundsätzliches zu R",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grundlagen R</span>"
    ]
  },
  {
    "objectID": "grundlagen_R.html#grundsätzliches-zu-r",
    "href": "grundlagen_R.html#grundsätzliches-zu-r",
    "title": "2  Grundlagen R",
    "section": "",
    "text": "2.1.1 Zuweisungsoperator\nIn R werden Werte Variablen mit dem &lt;- Operator zugewiesen.\n\n# Variablen erstellen und Wert zuweisen\na &lt;- 5\n\n# Die Zuweisung kann auch umgekehrt erfolgen\n5 -&gt; b\n\n# Das gleiche funktioniert grundsätzlich aber auch mit dem = Operator\n# Allerdings wird der &lt;- Operator bevorzugt\nc = 10\n\n\n\n2.1.2 Kommentare\nKommentare in R werden mit einem # eingeleitet. Sie können entweder in einer eigenen Zeile stehen oder am Ende einer Codezeile.\n\n# Das ist ein Kommentar\na &lt;- 5 # Das ist auch ein Kommentar\n\n\n\n2.1.3 Ausgabe\nIn R können Werte entweder mit der print() Funktion oder einfach durch Eingabe des Variablennamens ausgegeben werden.\n\n# Ausgabe von Variablen\nprint(a)\n\n[1] 5\n\nb\n\n[1] 5",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grundlagen R</span>"
    ]
  },
  {
    "objectID": "grundlagen_R.html#datentypen",
    "href": "grundlagen_R.html#datentypen",
    "title": "2  Grundlagen R",
    "section": "2.2 Datentypen",
    "text": "2.2 Datentypen\nIn R gibt es verschiedene Datentypen. Die wichtigsten sind:\n\nNumerische Werte (z.B. 5, 3.14)\nZeichenketten (Strings) (z.B. \"Hallo Welt\")\nLogische Werte (TRUE, FALSE)\nVektoren (in Python Listen) (z.B. c(1, 2, 3))1\nData Frames (ähnlich wie Tabellen, Mischen von Datentypen möglich)\nMatrizen (ähnlich wie in der Mathematik, keine Mischung von Datentypen möglich)\n\n\n2.2.1 Vektoren\nDa Vektoren eine der grundlegenden Datenstrukturen in R sind, werden wir uns diese genauer ansehen.\nSie können mit der c() Funktion erstellt werden. Vektoren sind grundsätzlich ähnlich wie Objekte vom Typ list in Python. Vektoren können sämtliche Datentypen enthalten, jedoch nur einen Datentyp pro Vektor.\nAuf Vektoren können verschiedene Operationen durchgeführt werden, wie z.B. Addition, Subtraktion, Multiplikation, Division, etc.\n\n# Vektor erstellen\nvectorA &lt;- c(1, 2, 3, 4, 5)\n\n# Länge des Vektors\nlength(vectorA)\n\n[1] 5\n\n# Logischer Vergleich\nvectorA &gt;= 3\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n\n# Arithmetische Operationen\nvectorA + 5\n\n[1]  6  7  8  9 10\n\n\nWenn wir nun den Vektor vectorA erneut ausgeben, beobachten wir, dass die Operationen nicht den ursprünglichen Vektor verändert haben.\n\nvectorA\n\n[1] 1 2 3 4 5\n\n\nUm den Vektor zu verändern, müssen wir den veränderten Vektor entweder einer neuen Variablen zuweisen oder den Vektor direkt überschreiben.\n\n# Vektor einer neuen Variablen zuweisen\nvectorB &lt;- vectorA + 5\n\n# Vektor ausgeben\nvectorB\n\n[1]  6  7  8  9 10\n\n# Wir können den Vektor auch direkt überschreiben\nvectorA &lt;- vectorA + 5\n\n# Vektor ausgeben\nvectorA\n\n[1]  6  7  8  9 10\n\n\n\n2.2.1.1 Indizierung\nVektoren können indiziert werden, um auf bestimmte Elemente zuzugreifen.\nDie Indizierung beginnt in R bei 1.\n\n# Erstes Element des Vektors\nvectorA[1]\n\n[1] 6\n\n\nWir können auch auf mehrere Elemente gleichzeitig zugreifen. Wenn wir z.B. auf das zweite bis vierte Element des Vektors zugreifen wollen, können wir dies mit dem : Operator tun.\n\n# Zweites bis viertes Element des Vektors\nvectorA[2:4]\n\n[1] 7 8 9\n\n# Alternativ können wir auch einzelne Elemente überspringen\nvectorA[c(1, 3, 5)]\n\n[1]  6  8 10\n\n\n\n\n2.2.1.2 Vektoren konkatenieren\nVektoren können auch konkateniert werden.\n\n# Vektoren erstellen\nvectorA &lt;- c(1, 2, 3, 4, 5)\n\n# Vektoren konkatenieren\nvectorC &lt;- c(vectorA, vectorB)\n\n# Vektor ausgeben\nvectorC\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\n2.2.1.3 Vektoren addieren\nVektoren können auch addiert werden. Hierbei werden die Vektoren elementweise addiert.2\n\n# Vektoren addieren\nvectorA + vectorB\n\n[1]  7  9 11 13 15\n\n\n\n\n2.2.1.4 Wichtige Funktionen für Vektoren\n\n\n\n\n\n\n\n\n\nFunktion\nBeschreibung\nBeispiel\nAusgabe\n\n\n\n\nlength()\nLänge des Vektors\nlength(vectorA)\n5\n\n\nsum()\nSumme der Elemente des Vektors\nsum(vectorA)\n15\n\n\nmean()\nDurchschnitt der Elemente des Vektors\nmean(vectorA)\n3\n\n\nvar()\nVarianz der Elemente des Vektors\nvar(vectorA)\n2.5\n\n\nsd()\nStandardabweichung der Elemente des Vektors\nsd(vectorA)\n1.5811388\n\n\nmin()\nMinimum des Vektors\nmin(vectorA)\n1\n\n\nmax()\nMaximum des Vektors\nmax(vectorA)\n5\n\n\nrange()\nBereich des Vektors\nrange(vectorA)\n1, 5\n\n\n\n\n\n\n2.2.2 Data Frames\nIn Data Frames können Vektoren unterschiedlicher Datentypen kombiniert werden. Sie sind ähnlich wie Tabellen in relationalen Datenbanken.\nData Frames können mit der data.frame() Funktion direkt erstellt werden.\n\n# Data Frame erstellen\ndataFrameA &lt;- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\"),\n  age = c(25, 30, 35, 40),\n  married = c(TRUE, FALSE, TRUE, TRUE)\n)\n\n# Data Frame ausgeben\ndataFrameA\n\n     name age married\n1   Alice  25    TRUE\n2     Bob  30   FALSE\n3 Charlie  35    TRUE\n4   David  40    TRUE\n\n\nWichtig ist, dass die Vektoren, die im Data Frame kombiniert werden sollen, die gleiche Länge haben müssen und dass die Vektoren nur einen Datentyp pro Vektor enthalten dürfen.\nWir beobachten auch hier, dass die Vektoren in der Initialisierung des Data Frames wieder mit der c() Funktion erstellt werden.\n\n2.2.2.1 Indizierung\nData Frames können indiziert werden, um auf bestimmte Elemente zuzugreifen.\nDie Indizierung erfolgt ähnlich wie bei Vektoren, jedoch mit dem Unterschied, dass wir zusätzlich auch die gewünschte Spalte angeben müssen. Dies erfolgt durch die Angabe der Zeilen- und Spaltennummer in eckigen Klammern.\nWenn wir eine ganze Zeile ausgeben wollen, geben wir nur die Zeilennummer an und lassen die Spaltennummer weg.\n\n# Erste Zeile des Data Frames\ndataFrameA[1, ]\n\n   name age married\n1 Alice  25    TRUE\n\n# Zweite Zeile und dritte Spalte des Data Frames\ndataFrameA[2, 3]\n\n[1] FALSE\n\n\nWir können mit dem $ Operator auch direkter auf bestimmte Spalten zugreifen.\n\n# Spalte \"name\" des Data Frames\ndataFrameA$name\n\n[1] \"Alice\"   \"Bob\"     \"Charlie\" \"David\"  \n\n\n\n\n2.2.2.2 Auswahl aus Data Frames wieder als Data Frame\nWir können subsetting verwenden, um einen Teil des Data Frames auszuwählen und diesen wieder als Data Frame zu speichern.\n\n# Auswahl der Spalten \"name\" und \"age\" als Data Frame\ndataFrameB &lt;- dataFrameA[, c(\"name\", \"age\")]\n\n# Data Frame ausgeben\ndataFrameB\n\n     name age\n1   Alice  25\n2     Bob  30\n3 Charlie  35\n4   David  40\n\n\n\n\n2.2.2.3 Wichtige Funktionen für Data Frames\n\n\n\n\n\n\n\n\n\nFunktion\nBeschreibung\nBeispiel\nAusgabe\n\n\n\n\nnrow()\nAnzahl der Zeilen des Data Frames\nnrow(dataFrameA)\n4\n\n\nncol()\nAnzahl der Spalten des Data Frames\nncol(dataFrameA)\n3\n\n\ncolnames()\nSpaltennamen des Data Frames\ncolnames(dataFrameA)\nname, age, married\n\n\nrownames()\nZeilennamen des Data Frames\nrownames(dataFrameA)\n1, 2, 3, 4\n\n\nsummary()\nZusammenfassung des Data Frames\nsummary(dataFrameA)\nLength:4 , Class :character , Mode :character , NA, NA, NA, Min. :25.00 , 1st Qu.:28.75 , Median :32.50 , Mean :32.50 , 3rd Qu.:36.25 , Max. :40.00 , Mode :logical , FALSE:1 , TRUE :3 , NA, NA, NA",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grundlagen R</span>"
    ]
  },
  {
    "objectID": "grundlagen_R.html#daten-importieren-und-exportieren",
    "href": "grundlagen_R.html#daten-importieren-und-exportieren",
    "title": "2  Grundlagen R",
    "section": "2.3 Daten importieren und exportieren",
    "text": "2.3 Daten importieren und exportieren\nIn R können Daten aus verschiedenen Dateiformaten importiert und exportiert werden. Dazu gehören z.B. CSV-Dateien, Excel-Dateien, JSON-Dateien, etc.\n\n2.3.1 CSV-Dateien\nCSV-Dateien können mit der read.csv() Funktion in R eingelesen werden.\n\n# CSV-Datei einlesen\nmeteodaten &lt;- read.csv('Data/meteodaten_saison.csv', sep = ',', header = TRUE)\n\nIn diesem Beispiel wird die CSV-Datei meteodaten_saison.csv eingelesen. Der Parameter sep = ',' gibt an, dass die Werte in der CSV-Datei durch Kommas getrennt sind. Der Parameter header = TRUE gibt an, dass die erste Zeile der CSV-Datei die Spaltennamen enthält.\n\n\n\n\n\n\nAchtung\n\n\n\nDer Pfad zur Datei muss entweder absolut (Bsp.: C:/Users/username/Documents/data.csv) oder relativ zum aktuellen Arbeitsverzeichnis (Bsp.: Data/data.csv) angegeben werden.\nIn aller Regel ist es sinnvoll, den Pfad relativ zum aktuellen Arbeitsverzeichnis anzugeben. Das aktuelle Arbeitsverzeichnis kann in der Terminalkonsole mit dem Befehl getwd() abgefragt werden, und mit dem Befehl setwd() kann das Arbeitsverzeichnis geändert werden.\nEine mögliche Praxis ist es, ein Unterverzeichnis Data im Projektverzeichnis anzulegen und dort alle Daten abzulegen.\n\n\n\n2.3.1.1 Wichtige Funktionen für Datenimport\n\n\nstr(): Zeigt die Struktur des Data Frames an.\n\n\nstr(meteodaten)\n\n'data.frame':   492 obs. of  6 variables:\n $ Jahr                           : int  1901 1901 1901 1901 1902 1902 1902 1902 1903 1903 ...\n $ Saison                         : chr  \"Fruehling(MAM)\" \"Herbst(SON)\" \"Sommer(JJA)\" \"Winter(DJF)\" ...\n $ Bern_Mitteltemperatur          : num  7.73 7.4 16.8 -2.73 7.53 ...\n $ Bern_Niederschlagssumme        : num  92.6 81.6 127 37.5 107.7 ...\n $ GrStBernhard_Mitteltemperatur  : num  -4 -0.8 6.3 -10.6 -3.63 ...\n $ GrStBernhard_Niederschlagssumme: num  164.9 173.6 95.1 118.7 149.4 ...\n\n\n\n\n\nhead(): Zeigt die ersten Zeilen des Data Frames an.\n\n\nhead(meteodaten)\n\n  Jahr         Saison Bern_Mitteltemperatur Bern_Niederschlagssumme\n1 1901 Fruehling(MAM)              7.733333                92.60000\n2 1901    Herbst(SON)              7.400000                81.63333\n3 1901    Sommer(JJA)             16.800000               127.03333\n4 1901    Winter(DJF)             -2.733333                37.46667\n5 1902 Fruehling(MAM)              7.533333               107.73333\n6 1902    Herbst(SON)              7.466667                77.23333\n  GrStBernhard_Mitteltemperatur GrStBernhard_Niederschlagssumme\n1                     -4.000000                       164.90000\n2                     -0.800000                       173.60000\n3                      6.300000                        95.06667\n4                    -10.600000                       118.73333\n5                     -3.633333                       149.36667\n6                     -1.000000                       111.86667\n\n\n\n\n\ntail(): Zeigt die letzten Zeilen des Data Frames an.\n\n\ntail(meteodaten)\n\n    Jahr         Saison Bern_Mitteltemperatur Bern_Niederschlagssumme\n487 2022    Sommer(JJA)             20.000000                79.43333\n488 2022    Winter(DJF)              2.233333                61.56667\n489 2023 Fruehling(MAM)              9.533333                90.83333\n490 2023    Herbst(SON)             11.966667               123.73333\n491 2023    Sommer(JJA)             20.000000                67.70000\n492 2023    Winter(DJF)              2.700000                77.70000\n    GrStBernhard_Mitteltemperatur GrStBernhard_Niederschlagssumme\n487                     10.266667                        85.60000\n488                     -4.966667                        90.00000\n489                     -1.666667                       129.46667\n490                      2.966667                       184.43333\n491                      9.200000                        96.13333\n492                     -5.333333                        76.23333\n\n\n\n\n\nsummary(): Gibt eine Zusammenfassung des Data Frames aus.\n\n\nsummary(meteodaten)\n\n      Jahr         Saison          Bern_Mitteltemperatur\n Min.   :1901   Length:492         Min.   :-4.500       \n 1st Qu.:1931   Class :character   1st Qu.: 4.883       \n Median :1962   Mode  :character   Median : 8.750       \n Mean   :1962                      Mean   : 8.715       \n 3rd Qu.:1993                      3rd Qu.:12.750       \n Max.   :2023                      Max.   :21.100       \n Bern_Niederschlagssumme GrStBernhard_Mitteltemperatur\n Min.   : 15.97          Min.   :-11.2000             \n 1st Qu.: 61.89          1st Qu.: -5.1000             \n Median : 81.07          Median : -1.4000             \n Mean   : 84.42          Mean   : -0.9232             \n 3rd Qu.:102.95          3rd Qu.:  3.2750             \n Max.   :200.03          Max.   : 10.5333             \n GrStBernhard_Niederschlagssumme\n Min.   : 41.97                 \n 1st Qu.:127.68                 \n Median :163.83                 \n Mean   :171.29                 \n 3rd Qu.:206.39                 \n Max.   :450.53                 \n\n\n\n\n\nIndizierung: Mit der Indizierung können bestimmte Zeilen und Spalten des Data Frames ausgewählt werden.\n\n\nmeteodaten[1:10,] # Ersten 10 Zeilen\n\n   Jahr         Saison Bern_Mitteltemperatur Bern_Niederschlagssumme\n1  1901 Fruehling(MAM)              7.733333                92.60000\n2  1901    Herbst(SON)              7.400000                81.63333\n3  1901    Sommer(JJA)             16.800000               127.03333\n4  1901    Winter(DJF)             -2.733333                37.46667\n5  1902 Fruehling(MAM)              7.533333               107.73333\n6  1902    Herbst(SON)              7.466667                77.23333\n7  1902    Sommer(JJA)             16.466667                98.63333\n8  1902    Winter(DJF)             -0.800000                64.63333\n9  1903 Fruehling(MAM)              7.433333                59.20000\n10 1903    Herbst(SON)              8.766667                89.10000\n   GrStBernhard_Mitteltemperatur GrStBernhard_Niederschlagssumme\n1                     -4.0000000                       164.90000\n2                     -0.8000000                       173.60000\n3                      6.3000000                        95.06667\n4                    -10.6000000                       118.73333\n5                     -3.6333333                       149.36667\n6                     -1.0000000                       111.86667\n7                      5.3000000                        80.90000\n8                     -7.4000000                       113.73333\n9                     -4.4666667                       136.56667\n10                    -0.4666667                       169.03333",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grundlagen R</span>"
    ]
  },
  {
    "objectID": "grundlagen_R.html#plots-erstellen",
    "href": "grundlagen_R.html#plots-erstellen",
    "title": "2  Grundlagen R",
    "section": "2.4 Plots erstellen",
    "text": "2.4 Plots erstellen\n“High-level” Plots können in R mit der plot() Funktion erstellt werden. Diese Funktion erstellt automatisch für die gegebenen Daten ein (geeignetes) Diagramm.\nWenn wir aber Beispielsweise unser ganzes meteodaten Data Frame plotten wollen, weiss die Funktion nicht, wie sie das tun soll und plottet einfach alle Spalten gegen alle anderen Zeilen. Dies ist in diesem Fall nicht sinnvoll.\n\nplot(meteodaten)\n\n\n\n\n\n\n\n\nUm unsere Daten sinnvoller zu plotten müssen wir die Daten zuerst filtern und dann plotten.\nWir diskutieren die verschiedenen Schritte hier später:\n\n# CSV-Datei einlesen\nmeteodaten &lt;- read.csv('Data/meteodaten_saison.csv',\n    sep = ',',\n    header = TRUE)\n\n# Subsets der Daten erstellen\nsaison_fruehling &lt;- meteodaten[meteodaten$Saison == \"Fruehling(MAM)\", ]\nsaison_sommer &lt;- meteodaten[meteodaten$Saison == \"Sommer(JJA)\", ]\nsaison_herbst &lt;- meteodaten[meteodaten$Saison == \"Herbst(SON)\", ]\nsaison_winter &lt;- meteodaten[meteodaten$Saison == \"Winter(DJF)\", ]\n\n# Plot mit den Saisontemperaturen erstellen erstellen\nplot(saison_fruehling$Jahr, saison_fruehling$Bern_Mitteltemperatur,\n    type = \"l\",\n    xlab = \"Jahr\",\n    ylab = \"Durchschnittstemperatur in °C\",\n    main = \"Saisonale Durchschnittstemperaturen in Bern\",\n    xlim = c(1900, 2020),\n    ylim = c(-5, 35))\n\n# Weitere Linien für andere Jahreszeiten auf den selben Plot hinzufügen\nlines(saison_sommer$Jahr, saison_sommer$Bern_Mitteltemperatur,\n    col = \"red\")\nlines(saison_herbst$Jahr, saison_herbst$Bern_Mitteltemperatur,\n    col = \"green\")\nlines(saison_winter$Jahr, saison_winter$Bern_Mitteltemperatur,\n    col = \"blue\")\n\n# Gestrichelte Horizontale Linie bei 0 hinzufügen\nabline(h = 0, lty = 2)\n\n# Saisonale Mittelwertlinien hinzufügen\nabline(h = mean(saison_fruehling$Bern_Mitteltemperatur),\n    col = \"black\",\n    lty = 3)\nabline(h = mean(saison_sommer$Bern_Mitteltemperatur),\n    col = \"red\",\n    lty = 3)\nabline(h = mean(saison_herbst$Bern_Mitteltemperatur),\n    col = \"green\",\n    lty = 3)\nabline(h = mean(saison_winter$Bern_Mitteltemperatur),\n    col = \"blue\",\n    lty = 3)\n\n# Legende hinzufügen\nlegend(\"topright\",\n    legend = c(\"Frühling\", \"Sommer\", \"Herbst\", \"Winter\"),\n    col = c(\"black\", \"red\", \"green\", \"blue\"),\n    lty = 1,\n    xpd = TRUE)\n\n\n\n\n\n\n\n\nSchauen wir uns nun die verschiedenen Schritte im Detail an.\n\nCSV-Datei einlesen: Zuerst lesen wir die CSV-Datei meteodaten_saison.csv ein.\n\n\n# CSV-Datei einlesen\nmeteodaten &lt;- read.csv('Data/meteodaten_saison.csv',\n    sep = ',',\n    header = TRUE)\n\nDer Parameter sep = ',' gibt an, dass die Werte in der CSV-Datei durch Kommas getrennt sind.\nDer Parameter header = TRUE gibt an, dass die erste Zeile der CSV-Datei die Spaltennamen enthält.\n\nSubsets der Daten erstellen: Da unser Data Frame meteodaten Daten aus verschiedenen Jahreszeiten enthält, erstellen wir Subsets für jede Jahreszeit. Damit können wir die Daten für jede Jahreszeit separat plotten.\n\n\n# Subsets der Daten erstellen\nsaison_fruehling &lt;- meteodaten[meteodaten$Saison == \"Fruehling(MAM)\", ]\nsaison_sommer &lt;- meteodaten[meteodaten$Saison == \"Sommer(JJA)\", ]\nsaison_herbst &lt;- meteodaten[meteodaten$Saison == \"Herbst(SON)\", ]\nsaison_winter &lt;- meteodaten[meteodaten$Saison == \"Winter(DJF)\", ]\n\nMit dem == Operator vergleichen wir die Werte auf Gleichheit.\n\nmeteodaten$Saison == \"Fruehling(MAM)\"\n\nWir überprüfen also Zeile für Zeile, ob der Wert in der Spalte Saison gleich dem String \"Fruehling(MAM)\" ist. Dies wird in einen boolschen Vektor umgewandelt, der TRUE für Zeilen enthält, die dem Kriterium entsprechen, und FALSE für Zeilen, die es nicht tun.\nBetrachten wir nun eine Klammer weiter aussen, um zu verstehen, was genau wir dem Subset zuweisen.\n\nmeteodaten[meteodaten$Saison == \"Fruehling(MAM)\", ]\n\nHier wählen wir alle Zeilen aus dem Data Frame meteodaten aus, in denen die Spalte Saison den Wert \"Fruehling(MAM)\" hat. Da wir nach dem letzten Komma nichts weiter angeben, wählen wir alle Spalten aus.\nUnsere Saisonalen Data Frames enthalten also nicht nur die Temperatur-Mittelwerte aus Bern, sondern auch die Niederschlagswerte von Bern und dem Grossen St. Bernhard. Wir greifen im erstellten Plot nur auf die Temperaturwerte zu.\n\nPlot mit den Saisontemperaturen erstellen: Wir erstellen einen Plot mit den saisonalen Durchschnittstemperaturen in Bern.\n\n\n# Plot mit den Saisontemperaturen erstellen erstellen\nplot(saison_fruehling$Jahr, saison_fruehling$Bern_Mitteltemperatur,\n    type = \"l\",\n    xlab = \"Jahr\",\n    ylab = \"Durchschnittstemperatur in °C\",\n    main = \"Saisonale Durchschnittstemperaturen in Bern\",\n    xlim = c(1900, 2020),\n    ylim = c(-5, 35))\n\nDie plot() Funktion hat viele Parameter, die wir verwenden können, um den Plot anzupassen.\n\n\n\n\n\n\n\nParameter\nBeschreibung\n\n\n\n\nplot(x, y)\nErstellt einen Plot der Werte in x gegen die Werte in y. Wir plotten hier die Spalte Jahr aus dem Subset saison_fruehling gegen die Spalte Bern_Mitteltemperatur aus dem gleichen subset.\n\n\ntype\nGibt den Typ des Plots an. Hier verwenden wir \"l\", um eine Linie zu zeichnen.\n\n\nxlab\nBeschriftung der x-Achse.\n\n\nylab\nBeschriftung der y-Achse.\n\n\nmain\nTitel des Plots.\n\n\nxlim\nBereich der x-Achse. Hier von 1900 bis 2020.\n\n\nylim\nBereich der y-Achse. Hier von -5 bis 35.\n\n\n\n\nWeitere Linien für andere Jahreszeiten auf den selben Plot hinzufügen: Wir fügen Linien für die anderen Jahreszeiten hinzu.\n\nIn R können wir mit der lines() Funktion weitere Linien zu einem bestehenden Plot hinzufügen.\n\n# Weitere Linien für andere Jahreszeiten auf den selben Plot hinzufügen\nlines(saison_sommer$Jahr, saison_sommer$Bern_Mitteltemperatur,\n    col = \"red\")\nlines(saison_herbst$Jahr, saison_herbst$Bern_Mitteltemperatur,\n    col = \"green\")\nlines(saison_winter$Jahr, saison_winter$Bern_Mitteltemperatur,\n    col = \"blue\")\n\nHier müssen wir jeweils nicht mehr ganz so viele Parameter angeben, da wir bereits die Achsenbesschriftung etc. vorgenommen haben. Was wir noch angeben müssen, ist die Farbe der Linie mit dem col Parameter.\n\nGestrichelte Horizontale Linie bei 0 hinzufügen: Wir fügen eine gestrichelte Horizontale Linie bei 0 hinzu.\n\n\n# Gestrichelte Horizontale Linie bei 0 hinzufügen\nabline(h = 0, lty = 2)\n\nMit der abline() Funktion können wir Linien zu einem Plot hinzufügen. Mit dem h Parameter geben wir die y-Position der Linie an, und mit dem lty Parameter geben wir den Linientyp an. Hier verwenden wir lty = 2, um eine gestrichelte Linie zu zeichnen.\n\nSaisonale Mittelwertlinien hinzufügen: Wir fügen Mittelwertlinien für jede Jahreszeit hinzu.\n\n\n# Saisonale Mittelwertlinien hinzufügen\nabline(h = mean(saison_fruehling$Bern_Mitteltemperatur),\n    col = \"black\",\n    lty = 3)\nabline(h = mean(saison_sommer$Bern_Mitteltemperatur),\n    col = \"red\",\n    lty = 3)\nabline(h = mean(saison_herbst$Bern_Mitteltemperatur),\n    col = \"green\",\n    lty = 3)\nabline(h = mean(saison_winter$Bern_Mitteltemperatur),\n    col = \"blue\",\n    lty = 3)\n\nHier fügen wir gestrichelte Linien für die Mittelwerte der Temperatur für jede Jahreszeit hinzu. Wir verwenden die mean() Funktion, um direkt im Aufruf den Mittelwert zu berechnen.\n\nLegende hinzufügen: Wir fügen eine Legende für die verschiedenen Linien hinzu.\n\n\n# Legende hinzufügen\nlegend(\"topright\",\n    legend = c(\"Frühling\", \"Sommer\", \"Herbst\", \"Winter\"),\n    col = c(\"black\", \"red\", \"green\", \"blue\"),\n    lty = 1,\n    xpd = TRUE)\n\nMit der legend() Funktion können wir eine Legende zu einem Plot hinzufügen. Wir geben die Position der Legende mit dem topright Parameter an. Mit dem legend Parameter geben wir die Beschriftungen für die Linien an. Mit dem col Parameter geben wir die Farben der Linien an. Mit dem lty Parameter geben wir den Linientyp an. Mit dem xpd Parameter geben wir an, ob die Legende ausserhalb des Plots sein soll.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grundlagen R</span>"
    ]
  },
  {
    "objectID": "grundlagen_R.html#footnotes",
    "href": "grundlagen_R.html#footnotes",
    "title": "2  Grundlagen R",
    "section": "",
    "text": "Kleine Anmerkung: Hier wird der Vektor mit der c() Funktion erstellt. Diese Funktion wird verwendet, um Werte zu kombinieren (combine). Mehr dazu im Abschnitt 3.1.↩︎\nWenn die Vektoren unterschiedliche Längen haben, wird der kürzere Vektor so oft wiederholt, bis er die Länge des längeren Vektors hat. Wenn die Länge des längeren Vektors kein Vielfaches der Länge des kürzeren Vektors ist, wird eine Warnung ausgegeben.↩︎",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grundlagen R</span>"
    ]
  },
  {
    "objectID": "wichtige_funktionen.html",
    "href": "wichtige_funktionen.html",
    "title": "3  Wichtigste Funktionen",
    "section": "",
    "text": "3.1 c()\nDie c() Funktion wird verwendet, um Werte zu kombinieren (combine). Sie wird häufig verwendet, um Vektoren zu erstellen.\n# Vektor erstellen\nvectorA &lt;- c(1, 2, 3, 4, 5)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Wichtigste Funktionen</span>"
    ]
  }
]