# Grundlagen R

## Grundsätzliches zu R

### Zuweisungsoperator

In R werden Werte Variablen mit dem `<-` Operator zugewiesen.

```{r}
#| label: assign-operator
# Variablen erstellen und Wert zuweisen
a <- 5

# Die Zuweisung kann auch umgekehrt erfolgen
5 -> b

# Das gleiche funktioniert grundsätzlich aber auch mit dem = Operator
# Allerdings wird der <- Operator bevorzugt
c = 10
```

### Kommentare

Kommentare in R werden mit einem `#` eingeleitet. Sie können entweder in einer eigenen Zeile stehen oder am Ende einer Codezeile.

```{r}
#| label: comments
# Das ist ein Kommentar
a <- 5 # Das ist auch ein Kommentar
```

### Ausgabe

In R können Werte entweder mit der `print()` Funktion oder einfach durch Eingabe des Variablennamens ausgegeben werden.

```{r}
#| label: console_output
# Ausgabe von Variablen
print(a)
b
```

## Datentypen

In R gibt es verschiedene Datentypen. Die wichtigsten sind:

- Numerische Werte (z.B. `5`, `3.14`)
- Zeichenketten (Strings) (z.B. `"Hallo Welt"`)
- Logische Werte (`TRUE`, `FALSE`)
- Vektoren (*in Python Listen*) (z.B. c(1, 2, 3))[^1]
- Data Frames (*ähnlich wie Tabellen*, Mischen von Datentypen möglich)
- Matrizen (*ähnlich wie in der Mathematik*, keine Mischung von Datentypen möglich)

[^1]: Kleine Anmerkung: Hier wird der Vektor mit der `c()` Funktion erstellt. Diese Funktion wird verwendet, um Werte zu kombinieren (*combine*).

### Vektoren {#sec-type-vector}

Da Vektoren eine der grundlegenden Datenstrukturen in R sind, werden wir uns diese genauer ansehen.

Sie können mit der `c()` Funktion erstellt werden. Vektoren sind grundsätzlich ähnlich wie Objekte vom Typ `list` in Python. Vektoren können sämtliche Datentypen enthalten, jedoch nur *einen Datentyp pro Vektor*.

Auf Vektoren können verschiedene Operationen durchgeführt werden, wie z.B. Addition, Subtraktion, Multiplikation, Division, etc.

```{r}
#| label: vector
# Vektor erstellen
vectorA <- c(1, 2, 3, 4, 5)

# Länge des Vektors
length(vectorA)

# Logischer Vergleich
vectorA >= 3

# Arithmetische Operationen
vectorA + 5
```

Wenn wir nun den Vektor `vectorA` erneut ausgeben, beobachten wir, dass die Operationen nicht den ursprünglichen Vektor verändert haben.

```{r}
#| label: vector_output
vectorA
```

Um den Vektor zu verändern, müssen wir den veränderten Vektor entweder einer neuen Variablen zuweisen oder den Vektor direkt überschreiben.

```{r}
#| label: vector_change
# Vektor einer neuen Variablen zuweisen
vectorB <- vectorA + 5

# Vektor ausgeben
vectorB

# Wir können den Vektor auch direkt überschreiben
vectorA <- vectorA + 5

# Vektor ausgeben
vectorA
```

#### Indizierung

Vektoren können indiziert werden, um auf bestimmte Elemente zuzugreifen.

**Die Indizierung beginnt in R bei 1.**

```{r}
#| label: vector_indexing
# Erstes Element des Vektors
vectorA[1]
```

Wir können auch auf mehrere Elemente gleichzeitig zugreifen. Wenn wir z.B. auf das zweite bis vierte Element des Vektors zugreifen wollen, können wir dies mit dem `:` Operator tun.

```{r}
#| label: vector_indexing_range
# Zweites bis viertes Element des Vektors
vectorA[2:4]

# Alternativ können wir auch einzelne Elemente überspringen
vectorA[c(1, 3, 5)]
```

#### Vektoren konkatenieren

Vektoren können auch konkateniert werden.

```{r}
#| label: vector_concatenation
# Vektoren erstellen
vectorA <- c(1, 2, 3, 4, 5)

# Vektoren konkatenieren
vectorC <- c(vectorA, vectorB)

# Vektor ausgeben
vectorC
```

#### Vektoren addieren

Vektoren können auch addiert werden. Hierbei werden die Vektoren elementweise addiert.[^2]

[^2]: Wenn die Vektoren unterschiedliche Längen haben, wird der kürzere Vektor so oft wiederholt, bis er die Länge des längeren Vektors hat. Wenn die Länge des längeren Vektors kein Vielfaches der Länge des kürzeren Vektors ist, wird eine Warnung ausgegeben.

```{r}
#| label: vector_addition
# Vektoren addieren
vectorA + vectorB
```

#### Wichtige Funktionen für Vektoren

| Funktion   | Beschreibung                                | Beispiel          | Ausgabe               |
| ---------- | ------------------------------------------- | ----------------- | --------------------- |
| `length()` | Länge des Vektors                           | `length(vectorA)` | `{r} length(vectorA)` |
| `sum()`    | Summe der Elemente des Vektors              | `sum(vectorA)`    | `{r} sum(vectorA)`    |
| `mean()`   | Durchschnitt der Elemente des Vektors       | `mean(vectorA)`   | `{r} mean(vectorA)`   |
| `var()`    | Varianz der Elemente des Vektors            | `var(vectorA)`    | `{r} var(vectorA)`    |
| `sd()`     | Standardabweichung der Elemente des Vektors | `sd(vectorA)`     | `{r} sd(vectorA)`     |
| `min()`    | Minimum des Vektors                         | `min(vectorA)`    | `{r} min(vectorA)`    |
| `max()`    | Maximum des Vektors                         | `max(vectorA)`    | `{r} max(vectorA)`    |
| `range()`  | Bereich des Vektors                         | `range(vectorA)`  | `{r} range(vectorA)`  |

### Data Frames {#sec-type-data-frames}

In Data Frames können [Vektoren](@sec-type-vector) unterschiedlicher Datentypen kombiniert werden. Sie sind ähnlich wie Tabellen in relationalen Datenbanken.

Data Frames können mit der `data.frame()` Funktion direkt erstellt werden.

```{r}
#| label: data_frame
# Data Frame erstellen
dataFrameA <- data.frame(
  name = c("Alice", "Bob", "Charlie", "David"),
  age = c(25, 30, 35, 40),
  married = c(TRUE, FALSE, TRUE, TRUE)
)

# Data Frame ausgeben
dataFrameA
```

Wichtig ist, dass die Vektoren, die im Data Frame kombiniert werden sollen, die gleiche Länge haben müssen und dass die Vektoren nur *einen Datentyp pro Vektor* enthalten dürfen.

Wir beobachten auch hier, dass die Vektoren in der Initialisierung des Data Frames wieder mit der `c()` Funktion erstellt werden.

#### Indizierung

Data Frames können indiziert werden, um auf bestimmte Elemente zuzugreifen.

Die Indizierung erfolgt ähnlich wie bei Vektoren, jedoch mit dem Unterschied, dass wir zusätzlich auch die gewünschte Spalte angeben müssen. Dies erfolgt durch die Angabe der Zeilen- und Spaltennummer in eckigen Klammern.

Wenn wir eine ganze Zeile ausgeben wollen, geben wir nur die Zeilennummer an und lassen die Spaltennummer weg.

```{r}
#| label: data_frame_indexing
# Erste Zeile des Data Frames
dataFrameA[1, ]

# Zweite Zeile und dritte Spalte des Data Frames
dataFrameA[2, 3]
```

Wir können mit dem `$` Operator auch direkter auf bestimmte Spalten zugreifen.

```{r}
#| label: data_frame_dollar_operator
# Spalte "name" des Data Frames
dataFrameA$name
```

#### Auswahl aus Data Frames wieder als Data Frame

Wir können subsetting verwenden, um einen Teil des Data Frames auszuwählen und diesen wieder als Data Frame zu speichern.

```{r}
#| label: data_frame_subsetting
# Auswahl der Spalten "name" und "age" als Data Frame
dataFrameB <- dataFrameA[, c("name", "age")]

# Data Frame ausgeben
dataFrameB
```

#### Wichtige Funktionen für Data Frames

| Funktion   | Beschreibung                                | Beispiel          | Ausgabe               |
| ---------- | ------------------------------------------- | ----------------- | --------------------- |
| `nrow()`   | Anzahl der Zeilen des Data Frames           | `nrow(dataFrameA)`| `{r} nrow(dataFrameA)`|
| `ncol()`   | Anzahl der Spalten des Data Frames          | `ncol(dataFrameA)`| `{r} ncol(dataFrameA)`|
| `colnames()`| Spaltennamen des Data Frames                | `colnames(dataFrameA)`| `{r} colnames(dataFrameA)`|
| `rownames()`| Zeilennamen des Data Frames                 | `rownames(dataFrameA)`| `{r} rownames(dataFrameA)`|
| `summary()`| Zusammenfassung des Data Frames             | `summary(dataFrameA)`| `{r} summary(dataFrameA)`|

## Daten importieren und exportieren

In R können Daten aus verschiedenen Dateiformaten importiert und exportiert werden. Dazu gehören z.B. CSV-Dateien, Excel-Dateien, JSON-Dateien, etc.

### CSV-Dateien

CSV-Dateien können mit der `read.csv()` Funktion in R eingelesen werden.

```{r}
#| label: csv_import
# CSV-Datei einlesen
meteodaten <- read.csv('Data/meteodaten_saison.csv', sep = ',', header = TRUE)
```

In diesem Beispiel wird die CSV-Datei `meteodaten_saison.csv` eingelesen. Der Parameter `sep = ','` gibt an, dass die Werte in der CSV-Datei durch Kommas getrennt sind. Der Parameter `header = TRUE` gibt an, dass die erste Zeile der CSV-Datei die Spaltennamen enthält.

:::{.callout-warning title="Achtung"}
Der Pfad zur Datei muss entweder absolut (Bsp.: `C:/Users/username/Documents/data.csv`) oder relativ zum aktuellen Arbeitsverzeichnis (Bsp.: `Data/data.csv`) angegeben werden.

In aller Regel ist es sinnvoll, den Pfad relativ zum aktuellen Arbeitsverzeichnis anzugeben. Das aktuelle Arbeitsverzeichnis kann in der Terminalkonsole mit dem Befehl `getwd()` abgefragt werden, und mit dem Befehl `setwd()` kann das Arbeitsverzeichnis geändert werden.

Eine mögliche Praxis ist es, ein Unterverzeichnis `Data` im Projektverzeichnis anzulegen und dort alle Daten abzulegen.
:::

#### Wichtige Funktionen für Datenimport

<details>
  <summary><strong>`str()`</strong>: Zeigt die Struktur des Data Frames an.</summary>

```{r}
#| label: str_function
str(meteodaten)
```

</details>

<details>
  <summary><strong>`head()`</strong>: Zeigt die ersten Zeilen des Data Frames an.</summary>

```{r}
#| label: head_function
head(meteodaten)
```

</details>

<details>
  <summary><strong>`tail()`</strong>: Zeigt die letzten Zeilen des Data Frames an.</summary>

```{r}
#| label: tail_function
tail(meteodaten)
```

</details>

<details>
  <summary><strong>`summary()`</strong>: Gibt eine Zusammenfassung des Data Frames aus.</summary>

```{r}
#| label: summary_function
summary(meteodaten)
```

</details>

<details>
  <summary><strong>Indizierung</strong>: Mit der Indizierung können bestimmte Zeilen und Spalten des Data Frames ausgewählt werden.</summary>

```{r}
#| label: indexing
meteodaten[1:10,] # Ersten 10 Zeilen
```

</details>

## Daten als .csv- und .txt-Dateien exportieren

Daten können mit der `write.csv()` Funktion als CSV-Dateien und mit der `write.table()` Funktion als Textdateien exportiert werden.

### `.csv`-Dateien

```{r}
#| label: csv_export
#| eval: false
# CSV-Datei exportieren
write.csv(meteodaten,
          file = "meteodaten.csv",
          row.names = FALSE)
```

| Parameter   | Beschreibung                                                                                   |
|-------------|------------------------------------------------------------------------------------------------|
| `x`         | Das Data Frame, das exportiert werden soll.                                                    |
| `file`      | Dateiname und Speicherort. Auch hier können absolute und relative Dateipfade verwendet werden. |
| `row.names` | Gibt an, ob die Zeilennummern in der CSV-Datei gespeichert werden sollen.                      |

### `.txt`-Dateien

```{r}
#| label: txt_export
#| eval: false
# Textdatei exportieren
write.table(meteodaten, # Das Data Frame, das exportiert werden soll
            file = "meteodaten.txt", # Dateiname und Speicherort
            sep = "\t", # Tabulator als Trennzeichen
            eol = "\r", # Zeilenumbruch
            na = "NA", # Wert für fehlende Daten
            row.names = FALSE,
            col.names = TRUE)
```

| Parameter   | Beschreibung                                                                                   |
|-------------|------------------------------------------------------------------------------------------------|
| `x`         | Das Data Frame, das exportiert werden soll.                                                    |
| `file`      | Dateiname und Speicherort. Auch hier können absolute und relative Dateipfade verwendet werden. |
| `sep`       | Trennzeichen für die Spalten.                                                                  |
| `eol`       | Zeilenumbruch. Kann je nach Betriebssystem erforderlich sein.                                  |
| `na`        | Wert für fehlende Daten.                                                                       |
| `row.names` | Gibt an, ob die Zeilennummern in der Textdatei gespeichert werden sollen.                      |
| `col.names` | Gibt an, ob die Spaltennamen in der Textdatei gespeichert werden sollen.                       |

Wie sonst auch, haben die meisten Parameter Standardwerte, die nicht explizit angegeben werden müssen.

## Umgang mit Fehlwerten

Fehlwerte sind in Datenanalysen ein häufiges Problem. In R werden Fehlwerte standardmässig mit `NA` (Not Available) dargestellt.

### Fehlwerte in Funktionsaufrufen behandeln

Erstellen wir ein Beispiel-Vektor mit Fehlwerten:

```{r}
#| label: na_handling
vektor_mit_na <- c(1, 2, NA, 4, 5)
```

Wenn wir nun z.B. die Summe des Vektors berechnen, erhalten wir:

```{r}
#| label: sum_na
sum(vektor_mit_na)
```

Die Ausgabe ist `{r} sum(vektor_mit_na)`, da R nicht weiss, wie es mit dem Fehlwert umgehen soll.

Wir können in diversen Funktionen definieren, wie mit Fehlwerten umgegangen werden soll. Dazu können wir den `na.rm` Parameter verwenden. (rm = remove) Dieser Parameter ist standardmässig auf `FALSE` gesetzt.

```{r}
#| label: sum_na_rm
sum(vektor_mit_na,
    na.rm = TRUE)
```

Die Ausgabe ist `{r} sum(vektor_mit_na, na.rm = TRUE)`, da der Fehlwert ignoriert wird.

Dies funktioniert auch bei anderen Funktionen, wie z.B. `mean()`, `var()`, `sd()`, etc.

### Fehlwerte im Dateiimport behandeln

Beim Import von Daten können wir mit dem Parameter `na.strings` definieren, welche Werte als Fehlwerte interpretiert werden sollen.

```{r}
#| label: csv_import_na
#| eval: false
# CSV-Datei einlesen
meteodaten <- read.csv('Data/meteodaten_saison.csv',
                        sep = ',',
                        header = TRUE,
                        na.strings = c("NA", "N/A", "na"))
```

In diesem Beispiel definieren wir, dass die Werte `"NA"`, `"N/A"` und `"na"` als Fehlwerte interpretiert werden sollen.

### Fehlwerte identifizieren

Fehlwerte können mit der `is.na()` Funktion identifiziert und mit der `na.omit()` Funktion entfernt werden.

```{r}
#| label: na_identify
# Fehlwerte identifizieren
is.na(vektor_mit_na)

# Fehlwerte entfernen
vektor_ohne_na <- na.omit(vektor_mit_na)
```

Der Vektor ist nun: `{r} vektor_ohne_na`.

#### Überprüfen auf Gleichheit

Fehlwerte müssen mit `is.na()` überprüft werden, da sie nicht mit `==` verglichen werden können.[^5]

[^5]: Der Vergleich von Fehlwerten mit `==` ergibt immer `NA`, da R nicht weiss, ob der Fehlwert gleich einem anderen Wert ist oder nicht.

```{r}
#| label: na_equality
# Überprüfen auf Gleichheit
vektor_mit_na == NA

# Überprüfen auf Gleichheit mit is.na()
is.na(vektor_mit_na)
```

### Fehlwerte ersetzen

Mit der `replace()` Funktion können Fehlwerte am einfachsten ersetzt werden.

```{r}
#| label: replace_na
# Vector mit falschen Fehlwerten
vektor_mit_falschen_na <- c(1, 2, -999, 4, 5)

# Fehlwerte ersetzen
vektor_mit_korrigierten_na <- replace(vektor_mit_falschen_na,
                                      vektor_mit_falschen_na == -999,
                                      NA)
```

Der Vektor ist nun: `{r} vektor_mit_korrigierten_na`.

## Übungen

Berechne die Sommer (JJA) Temperaturanomalien zur Referenzperiode 1961 bis 1990 in Bern.

```{r}
#| label: exercise-3.1
# Daten einlesen
meteodaten <- read.csv('Data/meteodaten_saison.csv', sep = ',', header = TRUE)

# Daten filtern
saison_sommer <- meteodaten[meteodaten$Saison == "Sommer(JJA)", ]

# Referenzwert der Periode 1961 bis 1990 berechnen
referenzwert <- mean(
    saison_sommer$Bern_Mitteltemperatur[saison_sommer$Jahr >= 1961
    & saison_sommer$Jahr <= 1990])

# Sommer (JJA) Temperaturanomalien berechnen und direkt im data frame speichern
saison_sommer$Bern_Mitteltemperatur_anomalie <-
    saison_sommer$Bern_Mitteltemperatur - referenzwert

# Plot erstellen
plot(saison_sommer$Jahr,
    saison_sommer$Bern_Mitteltemperatur_anomalie,
    type = "l",
    xlab = "Jahr",
    ylab = "Temperaturanomalie (°C)",
    main = "Sommer (JJA) Temperaturanomalien in Bern")

# null-Linie hinzufügen
abline(h = 0, col = "red")
```




































